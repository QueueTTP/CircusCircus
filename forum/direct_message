from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///messaging.db'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)

class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    receiver_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(20), default='unread')

@app.route('/send_message', methods=['POST'])
def send_message():
    data = request.json
    new_message = Message(sender_id=data['sender_id'], receiver_id=data['receiver_id'], content=data['content'])
    db.session.add(new_message)
    db.session.commit()
    return jsonify({'message': 'Message sent successfully'}), 201

@app.route('/get_messages/<int:user_id>', methods=['GET'])
def get_messages(user_id):
    messages = Message.query.filter_by(receiver_id=user_id).order_by(Message.timestamp.desc()).all()
    return jsonify([{
        'id': msg.id,
        'sender_id': msg.sender_id,
        'receiver_id': msg.receiver_id,
        'content': msg.content,
        'timestamp': msg.timestamp,
        'status': msg.status
    } for msg in messages])

@app.route('/mark_as_read', methods=['POST'])
def mark_as_read():
    data = request.json
    message = Message.query.get(data['message_id'])
    if message:
        message.status = 'read'
        db.session.commit()
        return jsonify({'message': 'Message marked as read'})
    return jsonify({'error': 'Message not found'}), 404

if __name__ == '__main__':
    db.create_all()  # Create tables
    app.run(debug=True)
    
